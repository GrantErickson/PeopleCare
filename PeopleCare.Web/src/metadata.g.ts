import { getEnumMeta, solidify } from 'coalesce-vue/lib/metadata'
import type {
  Domain, ModelType, ObjectType, HiddenAreas, BehaviorFlags, 
  PrimitiveProperty, ForeignKeyProperty, PrimaryKeyProperty,
  ModelCollectionNavigationProperty, ModelReferenceNavigationProperty
} from 'coalesce-vue/lib/metadata'


const domain: Domain = { enums: {}, types: {}, services: {} }
export const AuditEntryState = domain.enums.AuditEntryState = {
  name: "AuditEntryState" as const,
  displayName: "Audit Entry State",
  type: "enum",
  ...getEnumMeta<"EntityAdded"|"EntityDeleted"|"EntityModified">([
  {
    value: 0,
    strValue: "EntityAdded",
    displayName: "Entity Added",
  },
  {
    value: 1,
    strValue: "EntityDeleted",
    displayName: "Entity Deleted",
  },
  {
    value: 2,
    strValue: "EntityModified",
    displayName: "Entity Modified",
  },
  ]),
}
export const Permission = domain.enums.Permission = {
  name: "Permission" as const,
  displayName: "Permission",
  type: "enum",
  ...getEnumMeta<"Admin"|"UserAdmin"|"ViewAuditLogs">([
  {
    value: 1,
    strValue: "Admin",
    displayName: "Admin - General",
    description: "Modify application configuration and other administrative functions excluding user/role management.",
  },
  {
    value: 2,
    strValue: "UserAdmin",
    displayName: "Admin - Users",
    description: "Add and modify users accounts and their assigned roles. Edit roles and their permissions.",
  },
  {
    value: 3,
    strValue: "ViewAuditLogs",
    displayName: "View Audit Logs",
  },
  ]),
}
export const Sex = domain.enums.Sex = {
  name: "Sex" as const,
  displayName: "Sex",
  type: "enum",
  ...getEnumMeta<"Male"|"Female"|"Intersex"|"NotAssigned">([
  {
    value: 0,
    strValue: "Male",
    displayName: "Male",
  },
  {
    value: 1,
    strValue: "Female",
    displayName: "Female",
  },
  {
    value: 2,
    strValue: "Intersex",
    displayName: "Intersex",
  },
  {
    value: 3,
    strValue: "NotAssigned",
    displayName: "Not Assigned",
  },
  ]),
}
export const Activity = domain.types.Activity = {
  name: "Activity" as const,
  displayName: "Activity",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "Activity",
  get keyProp() { return this.props.activityId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    activityId: {
      name: "activityId",
      displayName: "Activity Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    programActivities: {
      name: "programActivities",
      displayName: "Program Activities",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.activityId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.activity as ModelReferenceNavigationProperty },
      manyToMany: {
        name: "programs",
        displayName: "Programs",
        get typeDef() { return (domain.types.Program as ModelType & { name: "Program" }) },
        get farForeignKey() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.programId as ForeignKeyProperty },
        get farNavigationProp() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.program as ModelReferenceNavigationProperty },
        get nearForeignKey() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.activityId as ForeignKeyProperty },
        get nearNavigationProp() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.activity as ModelReferenceNavigationProperty },
      },
      dontSerialize: true,
    },
    participants: {
      name: "participants",
      displayName: "Participants",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "object",
        get typeDef() { return (domain.types.Participation as ObjectType & { name: "Participation" }) },
      },
      role: "value",
      dontSerialize: true,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    description: {
      name: "description",
      displayName: "Description",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Description is required.",
      }
    },
    date: {
      name: "date",
      displayName: "Date",
      type: "date",
      dateKind: "datetime",
      noOffset: true,
      role: "value",
    },
    durationInMinutes: {
      name: "durationInMinutes",
      displayName: "Duration In Minutes",
      type: "number",
      role: "value",
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Activity as ModelType & { name: "Activity" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Activity as ModelType & { name: "Activity" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Activity as ModelType & { name: "Activity" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Activity as ModelType & { name: "Activity" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const AuditLog = domain.types.AuditLog = {
  name: "AuditLog" as const,
  displayName: "Audit Log",
  get displayProp() { return this.props.type }, 
  type: "model",
  controllerRoute: "AuditLog",
  get keyProp() { return this.props.id }, 
  behaviorFlags: 0 as BehaviorFlags,
  props: {
    userId: {
      name: "userId",
      displayName: "User Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.AuditLog as ModelType & { name: "AuditLog" }).props.user as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
    },
    user: {
      name: "user",
      displayName: "Changed By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.AuditLog as ModelType & { name: "AuditLog" }).props.userId as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    id: {
      name: "id",
      displayName: "Id",
      type: "number",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    type: {
      name: "type",
      displayName: "Type",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Type is required.",
        maxLength: val => !val || val.length <= 100 || "Type may not be more than 100 characters.",
      }
    },
    keyValue: {
      name: "keyValue",
      displayName: "Key Value",
      type: "string",
      role: "value",
    },
    description: {
      name: "description",
      displayName: "Description",
      type: "string",
      role: "value",
    },
    state: {
      name: "state",
      displayName: "Change Type",
      type: "enum",
      get typeDef() { return AuditEntryState },
      role: "value",
    },
    date: {
      name: "date",
      displayName: "Date",
      type: "date",
      dateKind: "datetime",
      role: "value",
    },
    properties: {
      name: "properties",
      displayName: "Properties",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.AuditLogProperty as ModelType & { name: "AuditLogProperty" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.AuditLogProperty as ModelType & { name: "AuditLogProperty" }).props.parentId as ForeignKeyProperty },
      dontSerialize: true,
    },
    clientIp: {
      name: "clientIp",
      displayName: "Client IP",
      type: "string",
      role: "value",
    },
    referrer: {
      name: "referrer",
      displayName: "Referrer",
      type: "string",
      role: "value",
    },
    endpoint: {
      name: "endpoint",
      displayName: "Endpoint",
      type: "string",
      role: "value",
    },
  },
  methods: {
  },
  dataSources: {
    tenantedDataSource: {
      type: "dataSource",
      name: "TenantedDataSource" as const,
      displayName: "Tenanted Data Source",
      isDefault: true,
      props: {
      },
    },
  },
}
export const AuditLogProperty = domain.types.AuditLogProperty = {
  name: "AuditLogProperty" as const,
  displayName: "Audit Log Property",
  get displayProp() { return this.props.propertyName }, 
  type: "model",
  controllerRoute: "AuditLogProperty",
  get keyProp() { return this.props.id }, 
  behaviorFlags: 0 as BehaviorFlags,
  props: {
    id: {
      name: "id",
      displayName: "Id",
      type: "number",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    parentId: {
      name: "parentId",
      displayName: "Parent Id",
      type: "number",
      role: "foreignKey",
      get principalKey() { return (domain.types.AuditLog as ModelType & { name: "AuditLog" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.AuditLog as ModelType & { name: "AuditLog" }) },
      rules: {
        required: val => val != null || "Parent Id is required.",
      }
    },
    propertyName: {
      name: "propertyName",
      displayName: "Property Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Property Name is required.",
        maxLength: val => !val || val.length <= 100 || "Property Name may not be more than 100 characters.",
      }
    },
    oldValue: {
      name: "oldValue",
      displayName: "Old Value",
      type: "string",
      role: "value",
    },
    oldValueDescription: {
      name: "oldValueDescription",
      displayName: "Old Value Description",
      type: "string",
      role: "value",
    },
    newValue: {
      name: "newValue",
      displayName: "New Value",
      type: "string",
      role: "value",
    },
    newValueDescription: {
      name: "newValueDescription",
      displayName: "New Value Description",
      type: "string",
      role: "value",
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Disbursement = domain.types.Disbursement = {
  name: "Disbursement" as const,
  displayName: "Disbursement",
  get displayProp() { return this.props.disbursementId }, 
  type: "model",
  controllerRoute: "Disbursement",
  get keyProp() { return this.props.disbursementId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    disbursementId: {
      name: "disbursementId",
      displayName: "Disbursement Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.person as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Person is required.",
      }
    },
    person: {
      name: "person",
      displayName: "Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.personId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Person as ModelType & { name: "Person" }).props.disbursements as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    donationId: {
      name: "donationId",
      displayName: "Donation Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.donationId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Donation as ModelType & { name: "Donation" }) },
      get navigationProp() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.donation as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Donation is required.",
      }
    },
    donation: {
      name: "donation",
      displayName: "Donation",
      type: "model",
      get typeDef() { return (domain.types.Donation as ModelType & { name: "Donation" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.donationId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.donationId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.disbursements as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    regionId: {
      name: "regionId",
      displayName: "Region Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Region as ModelType & { name: "Region" }) },
      get navigationProp() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.region as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Region is required.",
      }
    },
    region: {
      name: "region",
      displayName: "Region",
      type: "model",
      get typeDef() { return (domain.types.Region as ModelType & { name: "Region" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.regionId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    description: {
      name: "description",
      displayName: "Description",
      type: "string",
      role: "value",
    },
    date: {
      name: "date",
      displayName: "Date",
      type: "date",
      dateKind: "date",
      noOffset: true,
      role: "value",
    },
    value: {
      name: "value",
      displayName: "Value",
      type: "number",
      role: "value",
    },
    quantity: {
      name: "quantity",
      displayName: "Quantity",
      type: "number",
      role: "value",
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Document = domain.types.Document = {
  name: "Document" as const,
  displayName: "Document",
  get displayProp() { return this.props.documentId }, 
  type: "model",
  controllerRoute: "Document",
  get keyProp() { return this.props.documentId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    documentId: {
      name: "documentId",
      displayName: "Document Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.Document as ModelType & { name: "Document" }).props.person as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Person is required.",
      }
    },
    person: {
      name: "person",
      displayName: "Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Document as ModelType & { name: "Document" }).props.personId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Person as ModelType & { name: "Person" }).props.documents as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    documentName: {
      name: "documentName",
      displayName: "Document Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Document Name is required.",
      }
    },
    url: {
      name: "url",
      displayName: "Url",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Url is required.",
      }
    },
    documentTypeId: {
      name: "documentTypeId",
      displayName: "Document Type Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.DocumentType as ModelType & { name: "DocumentType" }).props.documentTypeId as PrimaryKeyProperty },
      get principalType() { return (domain.types.DocumentType as ModelType & { name: "DocumentType" }) },
      get navigationProp() { return (domain.types.Document as ModelType & { name: "Document" }).props.documentType as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Document Type is required.",
      }
    },
    documentType: {
      name: "documentType",
      displayName: "Document Type",
      type: "model",
      get typeDef() { return (domain.types.DocumentType as ModelType & { name: "DocumentType" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Document as ModelType & { name: "Document" }).props.documentTypeId as ForeignKeyProperty },
      get principalKey() { return (domain.types.DocumentType as ModelType & { name: "DocumentType" }).props.documentTypeId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.DocumentType as ModelType & { name: "DocumentType" }).props.documents as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Document as ModelType & { name: "Document" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Document as ModelType & { name: "Document" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Document as ModelType & { name: "Document" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Document as ModelType & { name: "Document" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const DocumentType = domain.types.DocumentType = {
  name: "DocumentType" as const,
  displayName: "Document Type",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "DocumentType",
  get keyProp() { return this.props.documentTypeId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    documentTypeId: {
      name: "documentTypeId",
      displayName: "Document Type Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    documents: {
      name: "documents",
      displayName: "Documents",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Document as ModelType & { name: "Document" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.Document as ModelType & { name: "Document" }).props.documentTypeId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.Document as ModelType & { name: "Document" }).props.documentType as ModelReferenceNavigationProperty },
      dontSerialize: true,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.DocumentType as ModelType & { name: "DocumentType" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.DocumentType as ModelType & { name: "DocumentType" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.DocumentType as ModelType & { name: "DocumentType" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.DocumentType as ModelType & { name: "DocumentType" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Donation = domain.types.Donation = {
  name: "Donation" as const,
  displayName: "Donation",
  get displayProp() { return this.props.donationId }, 
  type: "model",
  controllerRoute: "Donation",
  get keyProp() { return this.props.donationId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    donationId: {
      name: "donationId",
      displayName: "Donation Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.person as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Person is required.",
      }
    },
    person: {
      name: "person",
      displayName: "Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.personId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Person as ModelType & { name: "Person" }).props.donations as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    regionId: {
      name: "regionId",
      displayName: "Region Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Region as ModelType & { name: "Region" }) },
      get navigationProp() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.region as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Region is required.",
      }
    },
    region: {
      name: "region",
      displayName: "Region",
      type: "model",
      get typeDef() { return (domain.types.Region as ModelType & { name: "Region" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.regionId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    description: {
      name: "description",
      displayName: "Description",
      type: "string",
      role: "value",
    },
    isInKind: {
      name: "isInKind",
      displayName: "Is In Kind",
      type: "boolean",
      role: "value",
    },
    value: {
      name: "value",
      displayName: "Value",
      type: "number",
      role: "value",
    },
    quantity: {
      name: "quantity",
      displayName: "Quantity",
      type: "number",
      role: "value",
    },
    date: {
      name: "date",
      displayName: "Date",
      type: "date",
      dateKind: "date",
      noOffset: true,
      role: "value",
    },
    disbursements: {
      name: "disbursements",
      displayName: "Disbursements",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.donationId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.donation as ModelReferenceNavigationProperty },
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Encounter = domain.types.Encounter = {
  name: "Encounter" as const,
  displayName: "Encounter",
  get displayProp() { return this.props.encounterId }, 
  type: "model",
  controllerRoute: "Encounter",
  get keyProp() { return this.props.encounterId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    encounterId: {
      name: "encounterId",
      displayName: "Encounter Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.person as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Person is required.",
      }
    },
    person: {
      name: "person",
      displayName: "Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.personId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Person as ModelType & { name: "Person" }).props.encounters as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    contactedById: {
      name: "contactedById",
      displayName: "Contacted By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.contactedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Contacted By is required.",
      }
    },
    contactedBy: {
      name: "contactedBy",
      displayName: "Contacted By",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.contactedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    regionId: {
      name: "regionId",
      displayName: "Region Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Region as ModelType & { name: "Region" }) },
      get navigationProp() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.region as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Region is required.",
      }
    },
    region: {
      name: "region",
      displayName: "Region",
      type: "model",
      get typeDef() { return (domain.types.Region as ModelType & { name: "Region" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.regionId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    encounterTypeId: {
      name: "encounterTypeId",
      displayName: "Encounter Type Id",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Encounter Type Id is required.",
      }
    },
    encounterType: {
      name: "encounterType",
      displayName: "Encounter Type",
      type: "object",
      get typeDef() { return (domain.types.EncounterType as ObjectType & { name: "EncounterType" }) },
      role: "value",
      dontSerialize: true,
    },
    notes: {
      name: "notes",
      displayName: "Notes",
      type: "string",
      role: "value",
    },
    location: {
      name: "location",
      displayName: "Location",
      type: "string",
      role: "value",
    },
    date: {
      name: "date",
      displayName: "Date",
      type: "date",
      dateKind: "datetime",
      noOffset: true,
      role: "value",
    },
    durationInMinutes: {
      name: "durationInMinutes",
      displayName: "Duration In Minutes",
      type: "number",
      role: "value",
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Ethnicity = domain.types.Ethnicity = {
  name: "Ethnicity" as const,
  displayName: "Ethnicity",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "Ethnicity",
  get keyProp() { return this.props.ethnicityId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    ethnicityId: {
      name: "ethnicityId",
      displayName: "Ethnicity Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Ethnicity as ModelType & { name: "Ethnicity" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Ethnicity as ModelType & { name: "Ethnicity" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Ethnicity as ModelType & { name: "Ethnicity" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Ethnicity as ModelType & { name: "Ethnicity" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const FundingSource = domain.types.FundingSource = {
  name: "FundingSource" as const,
  displayName: "Funding Source",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "FundingSource",
  get keyProp() { return this.props.fundingSourceId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    fundingSourceId: {
      name: "fundingSourceId",
      displayName: "Funding Source Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    programs: {
      name: "programs",
      displayName: "Programs",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Program as ModelType & { name: "Program" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.Program as ModelType & { name: "Program" }).props.fundingSourceId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.Program as ModelType & { name: "Program" }).props.fundingSource as ModelReferenceNavigationProperty },
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Gender = domain.types.Gender = {
  name: "Gender" as const,
  displayName: "Gender",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "Gender",
  get keyProp() { return this.props.genderId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    genderId: {
      name: "genderId",
      displayName: "Gender Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Gender as ModelType & { name: "Gender" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Gender as ModelType & { name: "Gender" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Gender as ModelType & { name: "Gender" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Gender as ModelType & { name: "Gender" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Person = domain.types.Person = {
  name: "Person" as const,
  displayName: "Person",
  get displayProp() { return this.props.personId }, 
  type: "model",
  controllerRoute: "Person",
  get keyProp() { return this.props.personId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    regionId: {
      name: "regionId",
      displayName: "Region Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Region as ModelType & { name: "Region" }) },
      get navigationProp() { return (domain.types.Person as ModelType & { name: "Person" }).props.region as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Region is required.",
      }
    },
    region: {
      name: "region",
      displayName: "Region",
      type: "model",
      get typeDef() { return (domain.types.Region as ModelType & { name: "Region" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.regionId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Region as ModelType & { name: "Region" }).props.peopleWithAccess as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    userId: {
      name: "userId",
      displayName: "User Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Person as ModelType & { name: "Person" }).props.user as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
    },
    user: {
      name: "user",
      displayName: "User",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.userId as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    regionsAvailable: {
      name: "regionsAvailable",
      displayName: "Regions Available",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Region as ModelType & { name: "Region" }) },
      },
      role: "value",
      dontSerialize: true,
    },
    personTypes: {
      name: "personTypes",
      displayName: "Person Types",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.personId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.person as ModelReferenceNavigationProperty },
      manyToMany: {
        name: "personTypes",
        displayName: "Person Types",
        get typeDef() { return (domain.types.PersonType as ModelType & { name: "PersonType" }) },
        get farForeignKey() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.personTypeId as ForeignKeyProperty },
        get farNavigationProp() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.personType as ModelReferenceNavigationProperty },
        get nearForeignKey() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.personId as ForeignKeyProperty },
        get nearNavigationProp() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.person as ModelReferenceNavigationProperty },
      },
      dontSerialize: true,
    },
    encounters: {
      name: "encounters",
      displayName: "Encounters",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Encounter as ModelType & { name: "Encounter" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.personId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.Encounter as ModelType & { name: "Encounter" }).props.person as ModelReferenceNavigationProperty },
      dontSerialize: true,
    },
    donations: {
      name: "donations",
      displayName: "Donations",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Donation as ModelType & { name: "Donation" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.personId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.Donation as ModelType & { name: "Donation" }).props.person as ModelReferenceNavigationProperty },
      dontSerialize: true,
    },
    disbursements: {
      name: "disbursements",
      displayName: "Disbursements",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.personId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.Disbursement as ModelType & { name: "Disbursement" }).props.person as ModelReferenceNavigationProperty },
      dontSerialize: true,
    },
    relationships: {
      name: "relationships",
      displayName: "Relationships",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Relationship as ModelType & { name: "Relationship" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.personId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.person as ModelReferenceNavigationProperty },
      dontSerialize: true,
    },
    tags: {
      name: "tags",
      displayName: "Tags",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.personId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.person as ModelReferenceNavigationProperty },
      manyToMany: {
        name: "tags",
        displayName: "Tags",
        get typeDef() { return (domain.types.Tag as ModelType & { name: "Tag" }) },
        get farForeignKey() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.tagId as ForeignKeyProperty },
        get farNavigationProp() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.tag as ModelReferenceNavigationProperty },
        get nearForeignKey() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.personId as ForeignKeyProperty },
        get nearNavigationProp() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.person as ModelReferenceNavigationProperty },
      },
      dontSerialize: true,
    },
    documents: {
      name: "documents",
      displayName: "Documents",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Document as ModelType & { name: "Document" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.Document as ModelType & { name: "Document" }).props.personId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.Document as ModelType & { name: "Document" }).props.person as ModelReferenceNavigationProperty },
      dontSerialize: true,
    },
    sexAssignedAtBirth: {
      name: "sexAssignedAtBirth",
      displayName: "Sex Assigned At Birth",
      type: "enum",
      get typeDef() { return Sex },
      role: "value",
    },
    firstName: {
      name: "firstName",
      displayName: "First Name",
      type: "string",
      role: "value",
    },
    lastName: {
      name: "lastName",
      displayName: "Last Name",
      type: "string",
      role: "value",
    },
    email: {
      name: "email",
      displayName: "Email",
      type: "string",
      role: "value",
    },
    phone: {
      name: "phone",
      displayName: "Phone",
      type: "string",
      role: "value",
    },
    streetAddress: {
      name: "streetAddress",
      displayName: "Street Address",
      type: "string",
      role: "value",
    },
    city: {
      name: "city",
      displayName: "City",
      type: "string",
      role: "value",
    },
    state: {
      name: "state",
      displayName: "State",
      type: "string",
      role: "value",
    },
    zip: {
      name: "zip",
      displayName: "Zip",
      type: "string",
      role: "value",
    },
    country: {
      name: "country",
      displayName: "Country",
      type: "string",
      role: "value",
    },
    dateOfBirth: {
      name: "dateOfBirth",
      displayName: "Date Of Birth",
      type: "date",
      dateKind: "date",
      noOffset: true,
      role: "value",
    },
    ethnicity: {
      name: "ethnicity",
      displayName: "Ethnicity",
      type: "model",
      get typeDef() { return (domain.types.Ethnicity as ModelType & { name: "Ethnicity" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.ethnicityId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Ethnicity as ModelType & { name: "Ethnicity" }).props.ethnicityId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    ethnicityId: {
      name: "ethnicityId",
      displayName: "Ethnicity Id",
      type: "number",
      role: "foreignKey",
      get principalKey() { return (domain.types.Ethnicity as ModelType & { name: "Ethnicity" }).props.ethnicityId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Ethnicity as ModelType & { name: "Ethnicity" }) },
      get navigationProp() { return (domain.types.Person as ModelType & { name: "Person" }).props.ethnicity as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
    },
    countryOfOrigin: {
      name: "countryOfOrigin",
      displayName: "Country Of Origin",
      type: "string",
      role: "value",
    },
    cityOfOrigin: {
      name: "cityOfOrigin",
      displayName: "City Of Origin",
      type: "string",
      role: "value",
    },
    genderId: {
      name: "genderId",
      displayName: "Gender Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Gender as ModelType & { name: "Gender" }).props.genderId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Gender as ModelType & { name: "Gender" }) },
      get navigationProp() { return (domain.types.Person as ModelType & { name: "Person" }).props.gender as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
    },
    gender: {
      name: "gender",
      displayName: "Gender",
      type: "model",
      get typeDef() { return (domain.types.Gender as ModelType & { name: "Gender" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.genderId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Gender as ModelType & { name: "Gender" }).props.genderId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    pointPersonId: {
      name: "pointPersonId",
      displayName: "Point Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.Person as ModelType & { name: "Person" }).props.pointPerson as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
    },
    pointPerson: {
      name: "pointPerson",
      displayName: "Point Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.pointPersonId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    notes: {
      name: "notes",
      displayName: "Notes",
      type: "string",
      role: "value",
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Person as ModelType & { name: "Person" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Person as ModelType & { name: "Person" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const PersonPersonType = domain.types.PersonPersonType = {
  name: "PersonPersonType" as const,
  displayName: "Person Person Type",
  get displayProp() { return this.props.personPersonTypeId }, 
  type: "model",
  controllerRoute: "PersonPersonType",
  get keyProp() { return this.props.personPersonTypeId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    personPersonTypeId: {
      name: "personPersonTypeId",
      displayName: "Person Person Type Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.person as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Person is required.",
      }
    },
    person: {
      name: "person",
      displayName: "Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.personId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Person as ModelType & { name: "Person" }).props.personTypes as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    personTypeId: {
      name: "personTypeId",
      displayName: "Person Type Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.PersonType as ModelType & { name: "PersonType" }).props.personTypeId as PrimaryKeyProperty },
      get principalType() { return (domain.types.PersonType as ModelType & { name: "PersonType" }) },
      get navigationProp() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.personType as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Person Type is required.",
      }
    },
    personType: {
      name: "personType",
      displayName: "Person Type",
      type: "model",
      get typeDef() { return (domain.types.PersonType as ModelType & { name: "PersonType" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.personTypeId as ForeignKeyProperty },
      get principalKey() { return (domain.types.PersonType as ModelType & { name: "PersonType" }).props.personTypeId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonPersonType as ModelType & { name: "PersonPersonType" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const PersonRegionAccess = domain.types.PersonRegionAccess = {
  name: "PersonRegionAccess" as const,
  displayName: "Person Region Access",
  get displayProp() { return this.props.personRegionAccessId }, 
  type: "model",
  controllerRoute: "PersonRegionAccess",
  get keyProp() { return this.props.personRegionAccessId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    personRegionAccessId: {
      name: "personRegionAccessId",
      displayName: "Person Region Access Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.PersonRegionAccess as ModelType & { name: "PersonRegionAccess" }).props.person as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Person is required.",
      }
    },
    person: {
      name: "person",
      displayName: "Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonRegionAccess as ModelType & { name: "PersonRegionAccess" }).props.personId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    regionId: {
      name: "regionId",
      displayName: "Region Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Region as ModelType & { name: "Region" }) },
      get navigationProp() { return (domain.types.PersonRegionAccess as ModelType & { name: "PersonRegionAccess" }).props.region as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Region is required.",
      }
    },
    region: {
      name: "region",
      displayName: "Region",
      type: "model",
      get typeDef() { return (domain.types.Region as ModelType & { name: "Region" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonRegionAccess as ModelType & { name: "PersonRegionAccess" }).props.regionId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.PersonRegionAccess as ModelType & { name: "PersonRegionAccess" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.PersonRegionAccess as ModelType & { name: "PersonRegionAccess" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonRegionAccess as ModelType & { name: "PersonRegionAccess" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonRegionAccess as ModelType & { name: "PersonRegionAccess" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const PersonTag = domain.types.PersonTag = {
  name: "PersonTag" as const,
  displayName: "Person Tag",
  get displayProp() { return this.props.personTagId }, 
  type: "model",
  controllerRoute: "PersonTag",
  get keyProp() { return this.props.personTagId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    personTagId: {
      name: "personTagId",
      displayName: "Person Tag Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.person as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Person is required.",
      }
    },
    person: {
      name: "person",
      displayName: "Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.personId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Person as ModelType & { name: "Person" }).props.tags as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    tagId: {
      name: "tagId",
      displayName: "Tag Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Tag as ModelType & { name: "Tag" }).props.tagId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Tag as ModelType & { name: "Tag" }) },
      get navigationProp() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.tag as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Tag is required.",
      }
    },
    tag: {
      name: "tag",
      displayName: "Tag",
      type: "model",
      get typeDef() { return (domain.types.Tag as ModelType & { name: "Tag" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.tagId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Tag as ModelType & { name: "Tag" }).props.tagId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonTag as ModelType & { name: "PersonTag" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const PersonType = domain.types.PersonType = {
  name: "PersonType" as const,
  displayName: "Person Type",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "PersonType",
  get keyProp() { return this.props.personTypeId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    personTypeId: {
      name: "personTypeId",
      displayName: "Person Type Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    hasCareNeeds: {
      name: "hasCareNeeds",
      displayName: "Has Care Needs",
      type: "boolean",
      role: "value",
    },
    hasCareAssets: {
      name: "hasCareAssets",
      displayName: "Has Care Assets",
      type: "boolean",
      role: "value",
    },
    isOrganization: {
      name: "isOrganization",
      displayName: "Is an Organization",
      type: "boolean",
      role: "value",
    },
    people: {
      name: "people",
      displayName: "People",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      },
      role: "value",
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.PersonType as ModelType & { name: "PersonType" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.PersonType as ModelType & { name: "PersonType" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonType as ModelType & { name: "PersonType" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.PersonType as ModelType & { name: "PersonType" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Program = domain.types.Program = {
  name: "Program" as const,
  displayName: "Program",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "Program",
  get keyProp() { return this.props.programId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    programId: {
      name: "programId",
      displayName: "Program Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    description: {
      name: "description",
      displayName: "Description",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Description is required.",
      }
    },
    fundingSourceId: {
      name: "fundingSourceId",
      displayName: "Funding Source Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }).props.fundingSourceId as PrimaryKeyProperty },
      get principalType() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }) },
      get navigationProp() { return (domain.types.Program as ModelType & { name: "Program" }).props.fundingSource as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Funding Source is required.",
      }
    },
    fundingSource: {
      name: "fundingSource",
      displayName: "Funding Source",
      type: "model",
      get typeDef() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Program as ModelType & { name: "Program" }).props.fundingSourceId as ForeignKeyProperty },
      get principalKey() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }).props.fundingSourceId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }).props.programs as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    activities: {
      name: "activities",
      displayName: "Activities",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Activity as ModelType & { name: "Activity" }) },
      },
      role: "value",
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Program as ModelType & { name: "Program" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Program as ModelType & { name: "Program" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Program as ModelType & { name: "Program" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Program as ModelType & { name: "Program" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const ProgramActivity = domain.types.ProgramActivity = {
  name: "ProgramActivity" as const,
  displayName: "Program Activity",
  get displayProp() { return this.props.programActivityId }, 
  type: "model",
  controllerRoute: "ProgramActivity",
  get keyProp() { return this.props.programActivityId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    programActivityId: {
      name: "programActivityId",
      displayName: "Program Activity Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    programId: {
      name: "programId",
      displayName: "Program Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Program as ModelType & { name: "Program" }).props.programId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Program as ModelType & { name: "Program" }) },
      get navigationProp() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.program as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Program is required.",
      }
    },
    program: {
      name: "program",
      displayName: "Program",
      type: "model",
      get typeDef() { return (domain.types.Program as ModelType & { name: "Program" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.programId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Program as ModelType & { name: "Program" }).props.programId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    activityId: {
      name: "activityId",
      displayName: "Activity Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Activity as ModelType & { name: "Activity" }).props.activityId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Activity as ModelType & { name: "Activity" }) },
      get navigationProp() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.activity as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Activity is required.",
      }
    },
    activity: {
      name: "activity",
      displayName: "Activity",
      type: "model",
      get typeDef() { return (domain.types.Activity as ModelType & { name: "Activity" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.activityId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Activity as ModelType & { name: "Activity" }).props.activityId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Activity as ModelType & { name: "Activity" }).props.programActivities as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.ProgramActivity as ModelType & { name: "ProgramActivity" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Region = domain.types.Region = {
  name: "Region" as const,
  displayName: "Region",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "Region",
  get keyProp() { return this.props.regionId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    regionId: {
      name: "regionId",
      displayName: "Region Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    code: {
      name: "code",
      displayName: "Code",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Code is required.",
      }
    },
    parentRegionId: {
      name: "parentRegionId",
      displayName: "Parent Region Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Region as ModelType & { name: "Region" }) },
      get navigationProp() { return (domain.types.Region as ModelType & { name: "Region" }).props.parentRegion as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
    },
    parentRegion: {
      name: "parentRegion",
      displayName: "Parent Region",
      type: "model",
      get typeDef() { return (domain.types.Region as ModelType & { name: "Region" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.parentRegionId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.regionId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    children: {
      name: "children",
      displayName: "Children",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Region as ModelType & { name: "Region" }) },
      },
      role: "value",
      dontSerialize: true,
    },
    peopleWithAccess: {
      name: "peopleWithAccess",
      displayName: "People With Access",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.regionId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.Person as ModelType & { name: "Person" }).props.region as ModelReferenceNavigationProperty },
      dontSerialize: true,
    },
    level: {
      name: "level",
      displayName: "Level",
      type: "number",
      role: "value",
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Region as ModelType & { name: "Region" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Region as ModelType & { name: "Region" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Region as ModelType & { name: "Region" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Relationship = domain.types.Relationship = {
  name: "Relationship" as const,
  displayName: "Relationship",
  get displayProp() { return this.props.relationshipId }, 
  type: "model",
  controllerRoute: "Relationship",
  get keyProp() { return this.props.relationshipId }, 
  behaviorFlags: 6 as BehaviorFlags,
  props: {
    relationshipId: {
      name: "relationshipId",
      displayName: "Relationship Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.person as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Person is required.",
      }
    },
    person: {
      name: "person",
      displayName: "Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.personId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.Person as ModelType & { name: "Person" }).props.relationships as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    relatedPersonId: {
      name: "relatedPersonId",
      displayName: "Related Person Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Person as ModelType & { name: "Person" }) },
      get navigationProp() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.relatedPerson as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Related Person is required.",
      }
    },
    relatedPerson: {
      name: "relatedPerson",
      displayName: "Related Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.relatedPersonId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Person as ModelType & { name: "Person" }).props.personId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    relationshipTypeId: {
      name: "relationshipTypeId",
      displayName: "Relationship Type Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }).props.relationshipTypeId as PrimaryKeyProperty },
      get principalType() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }) },
      get navigationProp() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.relationshipType as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Relationship Type is required.",
      }
    },
    relationshipType: {
      name: "relationshipType",
      displayName: "Relationship Type",
      type: "model",
      get typeDef() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.relationshipTypeId as ForeignKeyProperty },
      get principalKey() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }).props.relationshipTypeId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    startDate: {
      name: "startDate",
      displayName: "Start Date",
      type: "date",
      dateKind: "date",
      noOffset: true,
      role: "value",
    },
    endDate: {
      name: "endDate",
      displayName: "End Date",
      type: "date",
      dateKind: "date",
      noOffset: true,
      role: "value",
    },
    isActive: {
      name: "isActive",
      displayName: "Is Active",
      type: "boolean",
      role: "value",
    },
    note: {
      name: "note",
      displayName: "Note",
      type: "string",
      role: "value",
    },
    oppositeRelationshipId: {
      name: "oppositeRelationshipId",
      displayName: "Opposite Relationship Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.relationshipId as PrimaryKeyProperty },
      get principalType() { return (domain.types.Relationship as ModelType & { name: "Relationship" }) },
      get navigationProp() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.oppositeRelationship as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
    },
    oppositeRelationship: {
      name: "oppositeRelationship",
      displayName: "Opposite Relationship",
      type: "model",
      get typeDef() { return (domain.types.Relationship as ModelType & { name: "Relationship" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.oppositeRelationshipId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.relationshipId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Relationship as ModelType & { name: "Relationship" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
    create: {
      name: "create",
      displayName: "Create",
      transportType: "item",
      httpMethod: "POST",
      isStatic: true,
      params: {
        person: {
          name: "person",
          displayName: "Person",
          type: "model",
          get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
          role: "value",
          rules: {
            required: val => val != null || "Person is required.",
          }
        },
        relatedPerson: {
          name: "relatedPerson",
          displayName: "Related Person",
          type: "model",
          get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
          role: "value",
          rules: {
            required: val => val != null || "Related Person is required.",
          }
        },
        relationshipTypeId: {
          name: "relationshipTypeId",
          displayName: "Relationship Type Id",
          type: "string",
          role: "value",
          rules: {
            required: val => (val != null && val !== '') || "Relationship Type Id is required.",
          }
        },
      },
      return: {
        name: "$return",
        displayName: "Result",
        type: "model",
        get typeDef() { return (domain.types.Relationship as ModelType & { name: "Relationship" }) },
        role: "value",
      },
    },
  },
  dataSources: {
  },
}
export const RelationshipType = domain.types.RelationshipType = {
  name: "RelationshipType" as const,
  displayName: "Relationship Type",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "RelationshipType",
  get keyProp() { return this.props.relationshipTypeId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    relationshipTypeId: {
      name: "relationshipTypeId",
      displayName: "Relationship Type Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    oppositeRelationshipTypeId: {
      name: "oppositeRelationshipTypeId",
      displayName: "Opposite Relationship Type Id",
      type: "string",
      role: "value",
    },
    oppositeRelationshipType: {
      name: "oppositeRelationshipType",
      displayName: "Opposite Relationship Type",
      type: "model",
      get typeDef() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }).props.oppositeRelationshipTypeId as ForeignKeyProperty },
      get principalKey() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }).props.relationshipTypeId as PrimaryKeyProperty },
      dontSerialize: true,
    },
    entityName: {
      name: "entityName",
      displayName: "Entity Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Entity Name is required.",
      }
    },
    relatedEntityName: {
      name: "relatedEntityName",
      displayName: "Related Entity Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Related Entity Name is required.",
      }
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.RelationshipType as ModelType & { name: "RelationshipType" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Role = domain.types.Role = {
  name: "Role" as const,
  displayName: "Role",
  description: "Roles are groups of permissions, analogous to job titles or functions.",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "Role",
  get keyProp() { return this.props.id }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    permissions: {
      name: "permissions",
      displayName: "Permissions",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "enum",
        get typeDef() { return Permission },
      },
      role: "value",
    },
    id: {
      name: "id",
      displayName: "Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Tag = domain.types.Tag = {
  name: "Tag" as const,
  displayName: "Tag",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "Tag",
  get keyProp() { return this.props.tagId }, 
  behaviorFlags: 7 as BehaviorFlags,
  props: {
    tagId: {
      name: "tagId",
      displayName: "Tag Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    people: {
      name: "people",
      displayName: "People",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      },
      role: "value",
      dontSerialize: true,
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Tag as ModelType & { name: "Tag" }).props.modifiedBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.Tag as ModelType & { name: "Tag" }).props.createdBy as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Tag as ModelType & { name: "Tag" }).props.createdById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.Tag as ModelType & { name: "Tag" }).props.modifiedById as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
  methods: {
  },
  dataSources: {
  },
}
export const Tenant = domain.types.Tenant = {
  name: "Tenant" as const,
  displayName: "Organization",
  get displayProp() { return this.props.name }, 
  type: "model",
  controllerRoute: "Tenant",
  get keyProp() { return this.props.tenantId }, 
  behaviorFlags: 2 as BehaviorFlags,
  props: {
    tenantId: {
      name: "tenantId",
      displayName: "Tenant Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
  },
  methods: {
    create: {
      name: "create",
      displayName: "Create",
      transportType: "item",
      httpMethod: "POST",
      isStatic: true,
      params: {
        name: {
          name: "name",
          displayName: "Org Name",
          type: "string",
          role: "value",
          rules: {
            required: val => (val != null && val !== '') || "Org Name is required.",
          }
        },
        adminEmail: {
          name: "adminEmail",
          displayName: "Admin Email",
          type: "string",
          subtype: "email",
          role: "value",
          rules: {
            required: val => (val != null && val !== '') || "Admin Email is required.",
          }
        },
      },
      return: {
        name: "$return",
        displayName: "Result",
        type: "void",
        role: "value",
      },
    },
  },
  dataSources: {
    defaultSource: {
      type: "dataSource",
      name: "DefaultSource" as const,
      displayName: "Default Source",
      isDefault: true,
      props: {
      },
    },
    globalAdminSource: {
      type: "dataSource",
      name: "GlobalAdminSource" as const,
      displayName: "Global Admin Source",
      props: {
      },
    },
  },
}
export const User = domain.types.User = {
  name: "User" as const,
  displayName: "User",
  description: "A user profile within the application.",
  get displayProp() { return this.props.fullName }, 
  type: "model",
  controllerRoute: "User",
  get keyProp() { return this.props.id }, 
  behaviorFlags: 2 as BehaviorFlags,
  props: {
    fullName: {
      name: "fullName",
      displayName: "Full Name",
      type: "string",
      role: "value",
    },
    userName: {
      name: "userName",
      displayName: "User Name",
      type: "string",
      role: "value",
    },
    email: {
      name: "email",
      displayName: "Email",
      type: "string",
      role: "value",
      dontSerialize: true,
    },
    emailConfirmed: {
      name: "emailConfirmed",
      displayName: "Email Confirmed",
      type: "boolean",
      role: "value",
      dontSerialize: true,
    },
    photoHash: {
      name: "photoHash",
      displayName: "Photo Hash",
      type: "binary",
      base64: true,
      role: "value",
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    userRoles: {
      name: "userRoles",
      displayName: "User Roles",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "model",
        get typeDef() { return (domain.types.UserRole as ModelType & { name: "UserRole" }) },
      },
      role: "collectionNavigation",
      get foreignKey() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.userId as ForeignKeyProperty },
      get inverseNavigation() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.user as ModelReferenceNavigationProperty },
      manyToMany: {
        name: "roles",
        displayName: "Roles",
        get typeDef() { return (domain.types.Role as ModelType & { name: "Role" }) },
        get farForeignKey() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.roleId as ForeignKeyProperty },
        get farNavigationProp() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.role as ModelReferenceNavigationProperty },
        get nearForeignKey() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.userId as ForeignKeyProperty },
        get nearNavigationProp() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.user as ModelReferenceNavigationProperty },
      },
      hidden: 3 as HiddenAreas,
      dontSerialize: true,
    },
    roleNames: {
      name: "roleNames",
      displayName: "Roles",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "string",
      },
      role: "value",
      dontSerialize: true,
    },
    isGlobalAdmin: {
      name: "isGlobalAdmin",
      displayName: "Is Global Admin",
      description: "Global admins can perform some administrative actions against ALL tenants.",
      type: "boolean",
      role: "value",
      hidden: 3 as HiddenAreas,
    },
    id: {
      name: "id",
      displayName: "Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
  },
  methods: {
    getPhoto: {
      name: "getPhoto",
      displayName: "Get Photo",
      transportType: "item",
      httpMethod: "GET",
      params: {
        id: {
          name: "id",
          displayName: "Primary Key",
          type: "string",
          role: "value",
          get source() { return (domain.types.User as ModelType & { name: "User" }).props.id },
          rules: {
            required: val => (val != null && val !== '') || "Primary Key is required.",
          }
        },
        etag: {
          name: "etag",
          displayName: "Etag",
          type: "binary",
          role: "value",
          get source() { return (domain.types.User as ModelType & { name: "User" }).props.photoHash },
        },
      },
      return: {
        name: "$return",
        displayName: "Result",
        type: "file",
        role: "value",
      },
    },
    evict: {
      name: "evict",
      displayName: "Evict",
      transportType: "item",
      httpMethod: "POST",
      params: {
        id: {
          name: "id",
          displayName: "Primary Key",
          type: "string",
          role: "value",
          get source() { return (domain.types.User as ModelType & { name: "User" }).props.id },
          rules: {
            required: val => (val != null && val !== '') || "Primary Key is required.",
          }
        },
      },
      return: {
        name: "$return",
        displayName: "Result",
        type: "void",
        role: "value",
      },
    },
    inviteUser: {
      name: "inviteUser",
      displayName: "Invite User",
      transportType: "item",
      httpMethod: "POST",
      isStatic: true,
      params: {
        email: {
          name: "email",
          displayName: "Email",
          type: "string",
          subtype: "email",
          role: "value",
          rules: {
            required: val => (val != null && val !== '') || "Email is required.",
          }
        },
        role: {
          name: "role",
          displayName: "Role",
          type: "model",
          get typeDef() { return (domain.types.Role as ModelType & { name: "Role" }) },
          role: "value",
        },
      },
      return: {
        name: "$return",
        displayName: "Result",
        type: "void",
        role: "value",
      },
    },
    setEmail: {
      name: "setEmail",
      displayName: "Set Email",
      transportType: "item",
      httpMethod: "POST",
      params: {
        id: {
          name: "id",
          displayName: "Primary Key",
          type: "string",
          role: "value",
          get source() { return (domain.types.User as ModelType & { name: "User" }).props.id },
          rules: {
            required: val => (val != null && val !== '') || "Primary Key is required.",
          }
        },
        newEmail: {
          name: "newEmail",
          displayName: "New Email",
          type: "string",
          subtype: "email",
          role: "value",
          rules: {
            required: val => (val != null && val !== '') || "New Email is required.",
          }
        },
      },
      return: {
        name: "$return",
        displayName: "Result",
        type: "void",
        role: "value",
      },
    },
    sendEmailConfirmation: {
      name: "sendEmailConfirmation",
      displayName: "Send Email Confirmation",
      transportType: "item",
      httpMethod: "POST",
      params: {
        id: {
          name: "id",
          displayName: "Primary Key",
          type: "string",
          role: "value",
          get source() { return (domain.types.User as ModelType & { name: "User" }).props.id },
          rules: {
            required: val => (val != null && val !== '') || "Primary Key is required.",
          }
        },
      },
      return: {
        name: "$return",
        displayName: "Result",
        type: "void",
        role: "value",
      },
    },
    setPassword: {
      name: "setPassword",
      displayName: "Set Password",
      transportType: "item",
      httpMethod: "POST",
      params: {
        id: {
          name: "id",
          displayName: "Primary Key",
          type: "string",
          role: "value",
          get source() { return (domain.types.User as ModelType & { name: "User" }).props.id },
          rules: {
            required: val => (val != null && val !== '') || "Primary Key is required.",
          }
        },
        currentPassword: {
          name: "currentPassword",
          displayName: "Current Password",
          type: "string",
          subtype: "password",
          role: "value",
        },
        newPassword: {
          name: "newPassword",
          displayName: "New Password",
          type: "string",
          subtype: "password",
          role: "value",
          rules: {
            required: val => (val != null && val !== '') || "New Password is required.",
          }
        },
        confirmNewPassword: {
          name: "confirmNewPassword",
          displayName: "Confirm New Password",
          type: "string",
          subtype: "password",
          role: "value",
          rules: {
            required: val => (val != null && val !== '') || "Confirm New Password is required.",
          }
        },
      },
      return: {
        name: "$return",
        displayName: "Result",
        type: "void",
        role: "value",
      },
    },
  },
  dataSources: {
    defaultSource: {
      type: "dataSource",
      name: "DefaultSource" as const,
      displayName: "Default Source",
      isDefault: true,
      props: {
      },
    },
  },
}
export const UserRole = domain.types.UserRole = {
  name: "UserRole" as const,
  displayName: "User Role",
  get displayProp() { return this.props.id }, 
  type: "model",
  controllerRoute: "UserRole",
  get keyProp() { return this.props.id }, 
  behaviorFlags: 5 as BehaviorFlags,
  props: {
    id: {
      name: "id",
      displayName: "Id",
      type: "string",
      role: "primaryKey",
      hidden: 3 as HiddenAreas,
    },
    user: {
      name: "user",
      displayName: "User",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.userId as ForeignKeyProperty },
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get inverseNavigation() { return (domain.types.User as ModelType & { name: "User" }).props.userRoles as ModelCollectionNavigationProperty },
      dontSerialize: true,
    },
    role: {
      name: "role",
      displayName: "Role",
      type: "model",
      get typeDef() { return (domain.types.Role as ModelType & { name: "Role" }) },
      role: "referenceNavigation",
      get foreignKey() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.roleId as ForeignKeyProperty },
      get principalKey() { return (domain.types.Role as ModelType & { name: "Role" }).props.id as PrimaryKeyProperty },
      dontSerialize: true,
    },
    userId: {
      name: "userId",
      displayName: "User Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.User as ModelType & { name: "User" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.User as ModelType & { name: "User" }) },
      get navigationProp() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.user as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "User is required.",
      }
    },
    roleId: {
      name: "roleId",
      displayName: "Role Id",
      type: "string",
      role: "foreignKey",
      get principalKey() { return (domain.types.Role as ModelType & { name: "Role" }).props.id as PrimaryKeyProperty },
      get principalType() { return (domain.types.Role as ModelType & { name: "Role" }) },
      get navigationProp() { return (domain.types.UserRole as ModelType & { name: "UserRole" }).props.role as ModelReferenceNavigationProperty },
      hidden: 3 as HiddenAreas,
      rules: {
        required: val => (val != null && val !== '') || "Role is required.",
      }
    },
  },
  methods: {
  },
  dataSources: {
    defaultSource: {
      type: "dataSource",
      name: "DefaultSource" as const,
      displayName: "Default Source",
      isDefault: true,
      props: {
      },
    },
  },
}
export const EncounterType = domain.types.EncounterType = {
  name: "EncounterType" as const,
  displayName: "Encounter Type",
  get displayProp() { return this.props.name }, 
  type: "object",
  props: {
    encounterTypeId: {
      name: "encounterTypeId",
      displayName: "Encounter Type Id",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Encounter Type Id is required.",
      }
    },
    name: {
      name: "name",
      displayName: "Name",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Name is required.",
      }
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "value",
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "value",
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "value",
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "value",
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
}
export const Participation = domain.types.Participation = {
  name: "Participation" as const,
  displayName: "Participation",
  type: "object",
  props: {
    participationId: {
      name: "participationId",
      displayName: "Participation Id",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Participation Id is required.",
      }
    },
    personId: {
      name: "personId",
      displayName: "Person Id",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Person Id is required.",
      }
    },
    person: {
      name: "person",
      displayName: "Person",
      type: "model",
      get typeDef() { return (domain.types.Person as ModelType & { name: "Person" }) },
      role: "value",
      dontSerialize: true,
    },
    activityId: {
      name: "activityId",
      displayName: "Activity Id",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Activity Id is required.",
      }
    },
    activity: {
      name: "activity",
      displayName: "Activity",
      type: "model",
      get typeDef() { return (domain.types.Activity as ModelType & { name: "Activity" }) },
      role: "value",
      dontSerialize: true,
    },
    programId: {
      name: "programId",
      displayName: "Program Id",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Program Id is required.",
      }
    },
    program: {
      name: "program",
      displayName: "Program",
      type: "model",
      get typeDef() { return (domain.types.Program as ModelType & { name: "Program" }) },
      role: "value",
      dontSerialize: true,
    },
    fundingSourceId: {
      name: "fundingSourceId",
      displayName: "Funding Source Id",
      type: "string",
      role: "value",
      rules: {
        required: val => (val != null && val !== '') || "Funding Source Id is required.",
      }
    },
    fundingSource: {
      name: "fundingSource",
      displayName: "Funding Source",
      type: "model",
      get typeDef() { return (domain.types.FundingSource as ModelType & { name: "FundingSource" }) },
      role: "value",
      dontSerialize: true,
    },
    isRegistered: {
      name: "isRegistered",
      displayName: "Is Registered",
      type: "boolean",
      role: "value",
    },
    isStaff: {
      name: "isStaff",
      displayName: "Is Staff",
      type: "boolean",
      role: "value",
    },
    isAttended: {
      name: "isAttended",
      displayName: "Is Attended",
      type: "boolean",
      role: "value",
    },
    note: {
      name: "note",
      displayName: "Note",
      type: "string",
      role: "value",
    },
    modifiedById: {
      name: "modifiedById",
      displayName: "Modified By Id",
      type: "string",
      role: "value",
      dontSerialize: true,
    },
    createdById: {
      name: "createdById",
      displayName: "Created By Id",
      type: "string",
      role: "value",
      dontSerialize: true,
    },
    createdBy: {
      name: "createdBy",
      displayName: "Created By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "value",
      dontSerialize: true,
    },
    createdOn: {
      name: "createdOn",
      displayName: "Created On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
    modifiedBy: {
      name: "modifiedBy",
      displayName: "Modified By",
      type: "model",
      get typeDef() { return (domain.types.User as ModelType & { name: "User" }) },
      role: "value",
      dontSerialize: true,
    },
    modifiedOn: {
      name: "modifiedOn",
      displayName: "Modified On",
      type: "date",
      dateKind: "datetime",
      role: "value",
      dontSerialize: true,
    },
  },
}
export const UserInfo = domain.types.UserInfo = {
  name: "UserInfo" as const,
  displayName: "User Info",
  type: "object",
  props: {
    id: {
      name: "id",
      displayName: "Id",
      type: "string",
      role: "value",
    },
    userName: {
      name: "userName",
      displayName: "User Name",
      type: "string",
      role: "value",
    },
    email: {
      name: "email",
      displayName: "Email",
      type: "string",
      role: "value",
    },
    fullName: {
      name: "fullName",
      displayName: "Full Name",
      type: "string",
      role: "value",
    },
    roles: {
      name: "roles",
      displayName: "Roles",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "string",
      },
      role: "value",
    },
    permissions: {
      name: "permissions",
      displayName: "Permissions",
      type: "collection",
      itemType: {
        name: "$collectionItem",
        displayName: "",
        role: "value",
        type: "string",
      },
      role: "value",
    },
    tenantId: {
      name: "tenantId",
      displayName: "Tenant Id",
      type: "string",
      role: "value",
      rules: {
        maxLength: val => !val || val.length <= 36 || "Tenant Id may not be more than 36 characters.",
      }
    },
    tenantName: {
      name: "tenantName",
      displayName: "Tenant Name",
      type: "string",
      role: "value",
    },
  },
}
export const SecurityService = domain.services.SecurityService = {
  name: "SecurityService",
  displayName: "Security Service",
  type: "service",
  controllerRoute: "SecurityService",
  methods: {
    whoAmI: {
      name: "whoAmI",
      displayName: "Who AmI",
      transportType: "item",
      httpMethod: "GET",
      params: {
      },
      return: {
        name: "$return",
        displayName: "Result",
        type: "object",
        get typeDef() { return (domain.types.UserInfo as ObjectType & { name: "UserInfo" }) },
        role: "value",
      },
    },
  },
}

interface AppDomain extends Domain {
  enums: {
    AuditEntryState: typeof AuditEntryState
    Permission: typeof Permission
    Sex: typeof Sex
  }
  types: {
    Activity: typeof Activity
    AuditLog: typeof AuditLog
    AuditLogProperty: typeof AuditLogProperty
    Disbursement: typeof Disbursement
    Document: typeof Document
    DocumentType: typeof DocumentType
    Donation: typeof Donation
    Encounter: typeof Encounter
    EncounterType: typeof EncounterType
    Ethnicity: typeof Ethnicity
    FundingSource: typeof FundingSource
    Gender: typeof Gender
    Participation: typeof Participation
    Person: typeof Person
    PersonPersonType: typeof PersonPersonType
    PersonRegionAccess: typeof PersonRegionAccess
    PersonTag: typeof PersonTag
    PersonType: typeof PersonType
    Program: typeof Program
    ProgramActivity: typeof ProgramActivity
    Region: typeof Region
    Relationship: typeof Relationship
    RelationshipType: typeof RelationshipType
    Role: typeof Role
    Tag: typeof Tag
    Tenant: typeof Tenant
    User: typeof User
    UserInfo: typeof UserInfo
    UserRole: typeof UserRole
  }
  services: {
    SecurityService: typeof SecurityService
  }
}

solidify(domain)

export default domain as unknown as AppDomain
